generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id            Int                @id @default(autoincrement())
  role               Role
  first_name         String?
  last_name          String?
  email              String             @unique
  password_hash      String
  city               String
  state              String
  country            String
  phone_number       String?
  business_name      String?
  business_industry  String?
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt
  preferences        Json?
  AdminReports       AdminReport[]
  aiChats            AiChat[]
  sentMessages       ChatMessage[]
  receivedChats      Chat[]             @relation("LawyerChats")
  sentChats          Chat[]             @relation("UserChats")
  consultationNotes  ConsultationNote[]
  documents          Document[]
  LawyerRatingsGiver LawyerRating[]     @relation("LawyerRatingsGiver")
  Lawyer             Lawyer?

  @@map("users")
}

model Lawyer {
  lawyer_id                 Int                @id
  profile_bio               String?
  specialization            String[]
  credentials_verified      Boolean            @default(false)
  verification_document_url String?
  rating                    Decimal?           @db.Decimal(2, 1)
  rating_count              Int                @default(0)
  created_at                DateTime           @default(now())
  updated_at                DateTime           @updatedAt
  consultationNotes         ConsultationNote[]
  LawyerRatingsReceiver     LawyerRating[]     @relation("LawyerRatingsReceiver")
  user                      User               @relation(fields: [lawyer_id], references: [user_id], onDelete: Cascade)

  @@map("lawyers")
}

model Document {
  document_id       Int                @id @default(autoincrement())
  user_id           Int
  document_title    String
  analysis_outline  Json?
  key_clauses       Json?
  key_points        Json?
  risk_assessment   Json?
  original_filename String?
  file_type         String?
  stored            Boolean            @default(true)
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  userUser_id       Int?
  aiChats           AiChat[]
  consultationNotes ConsultationNote[]
  User              User?              @relation(fields: [userUser_id], references: [user_id])

  @@map("documents")
}

model AiChat {
  chat_id      Int       @id @default(autoincrement())
  user_id      Int
  document_id  Int?
  session_id   String    @db.Uuid
  user_message String
  ai_response  String?
  timestamp    DateTime  @default(now())
  document     Document? @relation(fields: [document_id], references: [document_id])
  user         User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@map("ai_chats")
}

model Chat {
  chat_id    Int           @id @default(autoincrement())
  user_id    Int
  lawyer_id  Int
  status     ChatStatus
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt
  messages   ChatMessage[]
  lawyer     User          @relation("LawyerChats", fields: [lawyer_id], references: [user_id], onDelete: Cascade)
  user       User          @relation("UserChats", fields: [user_id], references: [user_id], onDelete: Cascade)

  @@map("chats")
}

model ChatMessage {
  message_id   Int      @id @default(autoincrement())
  chat_id      Int
  sender_id    Int
  message_text String
  timestamp    DateTime @default(now())
  is_read      Boolean  @default(false)
  chat         Chat     @relation(fields: [chat_id], references: [chat_id], onDelete: Cascade)
  sender       User     @relation(fields: [sender_id], references: [user_id], onDelete: Cascade)

  @@map("chat_messages")
}

model LegalArticle {
  article_id     Int       @id @default(autoincrement())
  title          String
  content        String
  source_url     String?
  published_date DateTime?
  category       String?
  tags           String[]
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  @@map("legal_articles")
}

model LegalEducationResource {
  resource_id   Int      @id @default(autoincrement())
  title         String
  description   String?
  content_url   String
  resource_type String?
  topic         String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@map("legal_education_resources")
}

model ConsultationNote {
  note_id             Int       @id @default(autoincrement())
  user_id             Int
  lawyer_id           Int?
  title               String
  content             String?
  related_document_id Int?
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  lawyer              Lawyer?   @relation(fields: [lawyer_id], references: [lawyer_id])
  document            Document? @relation(fields: [related_document_id], references: [document_id])
  user                User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@map("consultation_notes")
}

model LawyerRating {
  rating_id  Int      @id @default(autoincrement())
  user_id    Int
  lawyer_id  Int
  rating     Int
  comment    String?
  created_at DateTime @default(now())
  Lawyer     Lawyer   @relation("LawyerRatingsReceiver", fields: [lawyer_id], references: [lawyer_id], onDelete: Cascade)
  User       User     @relation("LawyerRatingsGiver", fields: [user_id], references: [user_id], onDelete: Cascade)

  @@map("lawyer_ratings")
}

model AdminReport {
  report_id           Int              @id @default(autoincrement())
  reported_by_user_id Int?
  reported_item_type  ReportedItemType
  reported_item_id    Int?
  report_reason       String?
  report_status       String?          @default("pending")
  admin_notes         String?
  created_at          DateTime         @default(now())
  updated_at          DateTime         @updatedAt
  User                User?            @relation(fields: [reported_by_user_id], references: [user_id])

  @@map("admin_reports")
}

enum Role {
  INDIVIDUAL
  BUSINESS
  LAWYER
  ADMIN
}

enum ChatStatus {
  PENDING
  ACCEPTED
  REJETCED
  CLOSED
}

enum ReportedItemType {
  DOCUMENT
  ARTICLE
  TEMPLATE
  CHAT_MESSAGE
  OTHER
}
